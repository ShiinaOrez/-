开始，第一部分：定向和安装

欢迎你，我们对于你想要学习怎么使用DOCKER非常的激动。

在这6个部分的帮助下，你会：
	1.安装并且了解方向，就在这个网页
	2.建立并且运行你的第一个app
	3.把你的app转变为一个扩展服务
	4.把你的服务部署在多台机器上
	5.添加一个持久的游客计数器
	6.把你的集群部署在生产环境中

应用本身很简单所以你不用在代码是如何运行上花费精力。毕竟，稻壳的价值在于它能怎样搭建、运送、并且运行一个应用。它和你的应用实际是如何运行的完全无关。

预备知识
	
	我们会定义一些概念，它有利于你去理解什么是Docker还有为什么你会使用Docker，在我们开始之前，我们假设您熟悉几个概念：
		·IP地址和端口
		·虚拟机
		·编辑配置文件
		·熟悉代码依赖项和构建的思想
		·机器资源的使用条款，比如CPU使用百分比，RAM中的使用字节
	最后，尽管我们将在你需要这些知识时再次提醒你，你可以以注册一个Docker ID并且在本地使用它的方式来节省一些精力。运行代码如下：

		docker login

对容器的一个简短说明：
	
	一个镜像文件是轻量级的，独立存在的，可执行的文件。它包含着一个软件运行需要的所有东西，包括代码啦、运行文件啦、库啦、还有环境变量和配置文件。
	容器是一个镜像文件的运行实例--就是镜像文件在运行时真正在内存中的东西。它默认情况下在宿主环境下完全独立的运行，在一定配置下，只访问主机和端口。
	容器以应用本来的运行方式在主机上运行。与虚拟机相比，它们具有更好的性能特征，而虚拟机只能通过虚拟机监控程序访问主机资源。容器可以获得本机访问，每个都在一个离散的进程中运行，不比任何其他可执行文件更多使用内存。

容器VS虚拟机
	
	通过这个图标来比较容器和虚拟机：

	虚拟机图表:

	-----------------------------------
	|               VM                |
	-----------------------------------
	|  App A  | |  App B  | |  App C  |
	-----------------------------------
	|Bins/Libs| |Bins/Libs| |Bins/Libs| 
	-----------------------------------
	| Guest OS| | Guest OS| | Guest OS|
	-----------------------------------
	|           Hypervisor            |
	-----------------------------------
	|         Infrastructure          |
	-----------------------------------

	虚拟机运行许多客系统--在图中每一块都有一个OS层。这是资源密集型的，由此产生的磁盘镜像和应用是由系统配置，系统设置依赖项，操作系统，安全补丁和其他事情纠缠而成的。

	容器图表：

	-----------------------------------
	|            CONTAINER            |
	-----------------------------------
	|  App A  | |  App B  | |  App C  |
	-----------------------------------
	|Bins/Libs| |Bins/Libs| |Bins/Libs|
	-----------------------------------
	|             Docker              |
	-----------------------------------
	|            Host OS              |
	-----------------------------------
	|         Infrastryctrue          |
	-----------------------------------

	容器可以共享一个内核，而且产生一个容器镜像文件唯一需要的信息是可执行文件和它的依赖包，并且永远不需要在主机上安装。这些进程运行起来和之前的进程完全一致，并且你可以以运行代码“docker ps”这种命令来单独的管理它们。就像你在Linux上运行“ps”去查看正在运行的进程一样。最后因为没有各种配置选项的纠缠，一个被容器化的应用可以在任何地方运行。

安装

	在我们开始之前，确保你系统中的Docker是最新版本。

	----------------
	|Install Docker|
	----------------

	提示：必须是Docker v1.13或以上

	你应该能够运行这个语句“docker run hello-world”并且看到以下相应：

		Note：你或许为了在非超级管理员的状态下使用这个命令需要把你的用户添加到docker的用户群。
		Note：如果你的网络设置有问题，“docker run hello-world”可能无法执行成功，可能是因为代理服务器阻断了连接。作为辅助，用下一个部分的代码检查一下：

		$ docker run hello-world

		Hello from Docker!
		This message shows that your installation appears to be working correctly.

		To generate this message, Docker took the following steps:
		...(snipped)...

	现在或许也是一个检查docker版本的好时机，运行“docker --version”来一探究竟：

		$ docker --version
		Docker version 17.05.0-ce-rc1, build 2878a85

	如果你看到了以上信息，那我们就开始旅行吧~ OvO

结语：
	
	规模以个人为单位，可移植的可执行文件有重大作用，这意味着持续集成和持续交互可以将更新发送到分布式应用程序的任何部分，系统依赖也不再是问题，资源密度也增加了。这种伸缩性的编制让问题从改变新的虚拟机转移到了更新新的可执行文件。

	我们会学习所有的这些东西，但是首先我们要学会如何迈出第一步。

	----------------
	| On to Part 2 |
	----------------